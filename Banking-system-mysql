-- =========================================================
-- SQL Schema for the Basic Banking System
-- =========================================================

-- 1. Customers Table
-- Stores user identity, personal information, and login credentials.
CREATE TABLE Customers (
    -- SERIAL/AUTO_INCREMENT is used for the primary key
    customer_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
    first_name VARCHAR(50) NOT NULL,
    last_name VARCHAR(50) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL, -- Used for login, must be unique
    password_hash VARCHAR(255) NOT NULL, -- Stores securely hashed password (e.g., bcrypt hash)
    phone_number VARCHAR(15),
    address VARCHAR(255),
    date_of_birth DATE,
    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

--------------------------------------------------------------------------------

-- 2. Accounts Table
-- Stores account details, linking to the customer and holding the current balance.
CREATE TABLE Accounts (
    -- BIGINT is used for account numbers, often 10+ digits, for realism
    account_id BIGINT PRIMARY KEY, 
    customer_id INT NOT NULL,
    
    -- Account type validation
    account_type VARCHAR(20) NOT NULL CHECK (account_type IN ('Checking', 'Savings', 'MoneyMarket')),
    
    -- DECIMAL ensures exact precision for currency, and balance should never be negative
    balance DECIMAL(15, 2) NOT NULL DEFAULT 0.00 CHECK (balance >= 0.00), 
    
    -- Status validation
    status VARCHAR(20) NOT NULL DEFAULT 'Active' CHECK (status IN ('Active', 'Closed', 'Suspended')),
    open_date DATE NOT NULL DEFAULT CURRENT_DATE,

    -- Define Foreign Key relationship to the Customers table
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

--------------------------------------------------------------------------------

-- 3. Transactions Table
-- The immutable audit log of all money movements.
CREATE TABLE Transactions (
    transaction_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
    
    -- Source and destination accounts are foreign keys to the Accounts table
    source_account_id BIGINT, 
    destination_account_id BIGINT, 
    
    -- Type validation
    transaction_type VARCHAR(50) NOT NULL CHECK (transaction_type IN ('Deposit', 'Withdrawal', 'Transfer', 'Fee', 'Payment')),
    
    -- Amount must be positive for the transaction record
    amount DECIMAL(15, 2) NOT NULL CHECK (amount > 0.00), 
    
    timestamp TIMESTAMP WITHOUT TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    
    -- Status validation
    status VARCHAR(20) NOT NULL DEFAULT 'Completed' CHECK (status IN ('Completed', 'Pending', 'Failed', 'Reversed')),
    description VARCHAR(255),
    
    -- Define Foreign Key relationships
    FOREIGN KEY (source_account_id) REFERENCES Accounts(account_id),
    FOREIGN KEY (destination_account_id) REFERENCES Accounts(account_id),

    -- Check constraint to enforce that at least one account ID is present (it can't be a transaction without involving *some* account)
    CHECK (source_account_id IS NOT NULL OR destination_account_id IS NOT NULL)
);

--------------------------------------------------------------------------------

-- Indexing for Performance
-- These indexes speed up common operations like retrieving an account's history.
CREATE INDEX idx_transactions_source_account ON Transactions (source_account_id, timestamp DESC);
CREATE INDEX idx_transactions_destination_account ON Transactions (destination_account_id, timestamp DESC);
CREATE UNIQUE INDEX idx_unique_email ON Customers (email);

-- Note: In a real system, the account_id and transaction_id would often be generated
-- using a specific sequence or UUIDs to ensure unique, non-guessable identifiers.
